#include<stdio.h>
#define size 5 //macro
//stack follows LIFO that is last in first out
typedef struct{
int info[size];
int top;
}stack;
void push(stack *,int);
int pop(stack *);
int isempty(stack *);
int isfull(stack *);
float aveg(stack *);
int main(stack *);

 void main(){
	stack s;
	int ch,v;
    s.top=-1;
    float avg;
    int mini;
    printf("1.PUSH\n2.POP\n3.EXIT\n4.AVERAGE\n5.MINIMUM");
    while(1){
    	printf("ENTER YOUR CHOICE:");
    	scanf("%d",&ch);
    	switch(ch){
    		case1: 
    		printf("ENTER A VALUE:");
    		scanf("%d",&v);
    		if(isfull(&s)==1)
    		printf("\n stack full");
    		else
    		push(&s,v);
    		break;
    			case2: 
    		if(isempty(&s)==1)
    		printf("\n stack empty");
    		else
    		printf("%d",pop(&s));
    		break;
    		case 3:
    			return;
    		case 4:
			avg=aveg(&s);
			printf("%2f",avg);
			break;
			case 5:
			mini=min(&s);
			printf("%d",mini);
			break;
			
		}
	}
}
void push(stack*p,int v){
	p->info[++p->top]=v;
}
int isempty(stack *p){
	if(p-top==-1)
	return 1;
	else 
	return 0;
}
int pop(stack *p){
	return p->info[p->top--]);
}
int isfull(stack *p){
	if(p-top==size-1)
	return 1;
	else 
	return 0;
}
float aveg(stack *s){
	int temp=s->top,count=0;
	float sum=0,avg;
	while (temp>-1){
		sum= sum+s->info[temp];
    temp--;
    count++;
}
	avg=sum/count;
	return avg;
}
int main(stack *s){
	int temp=s->top;
	int min=s->info[s->top];
	temp--;

while(temp>-1){
	if(s->info[temp]<min)
	min=s->info[temp];
	temp--;
}
return min;
}





